plugins {
	id "java"
	id "edu.wpi.first.GradleRIO" version "2023.1.1"
	id 'com.diffplug.spotless' version '6.11.0'
	id("com.github.spotbugs") version "5.0.14"
}

def VERSION = "1.6.0"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
	mavenLocal()
	mavenCentral()

	maven { url 'https://jitpack.io' }

	// maven { url "https://maven.revrobotics.com/" }

	// maven { url "https://dev.studica.com/maven/release/2023/" } // needs updating for future years!

	// maven { url "https://maven.ctr-electronics.com/release/" }
}

dependencies {
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()

	implementation group: 'edu.wpi.first.wpilibNewCommands', name: 'wpilibNewCommands-java', version: '2024.1.1-beta-3'

	implementation 'com.github.shueja:Monologue:v1.0.0-alpha2'

	// implementation group : 'com.revrobotics.frc', name: "REVLib-java", version: '2023.1.3'

	//implementation group: 'com.kauailabs.navx.frc', name: "navx-frc-java", version: '2023.0.3'

	// implementation group: "com.ctre.phoenix6", name: "wpiapi-java", version: "23.2.2"

	testImplementation 'junit:junit:4.13.2'
	compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"
}

if (hasProperty('buildScan')) {
	buildScan {
		termsOfServiceUrl = 'https://gradle.com/terms-of-service'
		termsOfServiceAgree = 'yes'
	}
}

test { testLogging.showStandardStreams = true }

spotless {
	format 'misc', {
		target fileTree(rootDir) {
			include '*.gradle', '.gitignore'
			exclude 'LICENSE.md'
		}

		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
	java {
		googleJavaFormat('1.15.0').aosp().reflowLongStrings()
		formatAnnotations()

		licenseHeaderFile 'licenseHeader.txt'
	}
}

compileJava.dependsOn spotlessApply

javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}

	options.memberLevel = JavadocMemberLevel.PUBLIC
}

spotbugs { ignoreFailures = true } // don't want spotbugs failing CI, although it should still be run

java { withJavadocJar() }

tasks.register('updateGitHooks', Copy) {
	from new File(rootProject.rootDir, 'scripts/pre-commit')
	into { new File(rootProject.rootDir, '.git/hooks') }
	fileMode 0775
}

compileJava.dependsOn updateGitHooks

tasks.register('sourceJar', Jar) {
	archiveClassifier.set("sources")
	from sourceSets.main.allJava
}
